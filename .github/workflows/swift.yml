name: Build, Test and Deploy iOS App

on:
  push:
    branches: [ master ]

jobs:
  build:
    name: 'Build and Tests'
    runs-on: macos-latest
    defaults:
      run:
        shell: bash
    
    steps:
    - uses: actions/checkout@v2
    - name: Force Xcode 13
      run: sudo xcode-select -switch /Applications/Xcode_13.3.app
    - uses: actions/checkout@v2
    - name: Build
      run: swift build -v
    - name: Run swift code test
      run: swift test -v
    - name: Run swift simulator test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
    
  tests:
    name: 'Security Tests'
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
    - name: SonarCloud Scan
      uses: sonarsource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    
  codecov:
    name: 'Code Coverage Tests'
    container:
      image: swift:5.3
    needs: build
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - run: swift test --enable-test-discovery --enable-code-coverage
    - uses: mattpolzin/swift-codecov-action@0.7.1
      with:
        MINIMUM_COVERAGE: 98
        INCLUDE_TESTS: 'true'  
        
